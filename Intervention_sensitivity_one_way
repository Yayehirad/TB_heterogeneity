#high and low value of parameters, mannualy save incidence at each run
#one way sensitivity of intervention to params value
library(deSolve)
library(reshape2)
library(ggplot2)
library(ggpubr)
require(lhs)
library(sensitivity)
#SENSITIVITY ANALYSIS
#Model Func

Baseline_model=function(current_timepoint, state_values, parameters)
{
  #creat state variables (local variables)
  S=state_values[1] #fully susceptible 
  L1=state_values[2] #early latency
  L2=state_values[3] #late latency
  I0=state_values[4] #infectious non-spreaders
  I1=state_values[5] #infectious spreaders
  I2=state_values[6] #infectious Super-spreaders
  
  
  with(
    as.list(parameters), #variable names within parameters can be used
    {
      #compute derivative
      dS=(mu*N+mui0*I0+mui1*I1+mui2*I2)+
        (delta0_b*I0+delta1_b*I1+delta2_b*I2)-
        ((beta0*I0+beta1*I1+beta2*I2)/N)*S-mu*S
      dL1=((beta0*I0+beta1*I1+beta2*I2)/N)*S+
        (r*(beta0*I0+beta1*I1+beta2*I2)/N)*L2-
        (epsilon0+epsilon1+epsilon2+mu+kappa)*L1
      dL2=kappa*L1+(gamma0*I0+gamma1*I1+gamma2*I2)-
        (r*(beta0*I0+beta1*I1+beta2*I2)/N)*L2-(nu0+nu1+nu2+mu)*L2
      dI0=(epsilon0*L1+nu0*L2)-(mui0+mu+gamma0+delta0_b+h)*I0
      dI1=(epsilon1*L1+nu1*L2+h*I0)-(mui1+mu+gamma1+delta1_b+j)*I1
      dI2=(epsilon2*L1+nu2*L2+j*I1)-(mui2+mu+gamma2+delta2_b)*I2
      
      dinc=(epsilon0*L1+nu0*L2)+(epsilon1*L1+nu1*L2)+(epsilon2*L1+nu2*L2)
      
      #combine results
      results=c(dS, dL1, dL2, dI0,dI1,dI2, dinc)
      list(results)
    }
  )
}

#Intervention model

intervention_model_S=function(current_timepoint, state_values, parameters)
{
  
  S=state_values[1] #fully susceptible 
  L1=state_values[2] #early latency
  L2=state_values[3] #late latency
  I0=state_values[4] #infectious non-spreaders
  I1=state_values[5] #infectious spreaders
  I2=state_values[6] #infectious Super-spreaders
  
  #creat state variables (local variables)
  

  with(
    as.list(parameters), #variable names within parameters can be used
    {
            #intervention strategy
      CDR_i_posibl=cdr_b+(1-cdr_b)*q#possible intervention size
      CDR_max=0.9#maximum possible CDR that the health system acan do
      CDR_i=min(CDR_i_posibl,CDR_max)#intervention CDR that can be used in model
      n=I0/(I0+I1+I2)#proportion of I0
      l=I1/(I0+I1+I2)#proportion of I1
      s=I2/(I0+I1+I2)#proportion of I2
      
      cdr2_imax_possible=(CDR_i-(n+l)*cdr_b)/s#super-spreader CDR intervention 
      cdr2_imax=min(cdr2_imax_possible,CDR_max)#the limit that SS CDR can take
      
      cdr2_i=CDR_i+(cdr2_imax-CDR_i)*d# Super-Spreaders CDR to be used in the model
      cdr1_i=(CDR_i-(s*cdr2_i))/(n+l)#low-spreaders CDR to be used in the model
      cdr0_i=cdr1_i#non-spreaders CDR
      
      #compute deltas (detection and treatment) for  
      delta0_i=(cdr0_i*(gamma0+mui0+mu+h)/(1-cdr0_i))
      delta1_i=(cdr1_i*(gamma1+mui1+mu+j)/(1-cdr1_i))
      delta2_i=(cdr2_i*(gamma2+mui2+mu)/(1-cdr2_i))
      #compute derivative
      dS=(mu*N+mui0*I0+mui1*I1+mui2*I2)+(delta0_i*I0+delta1_i*I1+delta2_i*I2)-
        ((beta0*I0+beta1*I1+beta2*I2)/N)*S-mu*S
      dL1=((beta0*I0+beta1*I1+beta2*I2)/N)*S+(r*(beta0*I0+beta1*I1+beta2*I2)/N)*L2-
        (epsilon0+epsilon1+epsilon2+mu+kappa)*L1
      dL2=kappa*L1+(gamma0*I0+gamma1*I1+gamma2*I2)-
        (r*(beta0*I0+beta1*I1+beta2*I2)/N)*L2-(nu0+nu1+nu2+mu)*L2
      dI0=(epsilon0*L1+nu0*L2)-(mui0+mu+gamma0+delta0_i+h)*I0
      dI1=(epsilon1*L1+nu1*L2+h*I0)-(mui1+mu+gamma1+delta1_i+j)*I1
      dI2=(epsilon2*L1+nu2*L2+j*I1)-(mui2+mu+gamma2+delta2_i)*I2
      
      dinc=(epsilon0*L1+nu0*L2)+(epsilon1*L1+nu1*L2)+(epsilon2*L1+nu2*L2)
      
      

      
      print("q")
      print(q)
      print("d")
      print(d)
      print("cdr2_i")
      print(cdr2_i)
      print("cdr1_i")
      print(cdr1_i)
      print("cdr0_i")
      print(cdr0_i)
      print("s")
      print(s)
      print("l")
      print(l)
      print("n")
      print(n)
      #combine results
      
      results=c(dS, dL1, dL2, dI0,dI1,dI2, dinc)
      list(results)
    }
  )
}

N=1#total population
Pinf=0.42# 0.39-0.46 mean 0.42   prop of infectious TB
Pss=0.18# 0.1-0.29 mean 0.18    proportion of ss among infectious

c=Pinf*Pss#min=Pinf_min*Pss_min,max= Pinf_max*pss_max, proportion of ss among all TB
b=Pinf*(1-Pss)#min=Pinf_min(1-Pss_max),max=Pinf_max(1-Pss_min)#proportion of LS among all TB
a=1-Pinf #proportion of non-spreaders among all TB

m=4.67#3.69-5.88 mean 4.67	#relative infectiousness of super-spreaders
beta0<-0
beta1<-12# 10- 15 mean 12,   event rate per low-spreaders
#baseline CDR 
cdr_b=0.65#min=0.5,max=0.75
beta2<-beta1*m #event rate per super-spreaders
r=0.21 #probability of geting reinction relative to susceptible individuals
Time_L1=0.25#time in L1 min = 0.167, max = 1,  mean 1/4
Time_I=3# 2-4 mean 3   duration of infectiousness
mu= 1/65#min = 1/55, max = 1/75 mean 1/65
total_outflows_I=(1/Time_I)-mu#

epsilon=0.4016#0.296-0.512, 0.4016 # M mean=0.0826,(min=0.06195,max= 0.10325)
kappa=(1/Time_L1)-(epsilon) # kappa=3.625#(1/Time_L1)-(epsilon)
nu=0.00195 #0.0009-0.00385, 0.00195  ##M mean=0.000594,(min=0.0004455,max= 0.0007425)

P_mui0=0.077#min = 0.05, max = 0.096, 0.077#TB case fatality 
P_mui1=0.077#min = 0.05, max = 0.096, 0.077
P_mui2=0.534#min = 0.327, max = 0.787 , 0.534

P_h=0.0#min = 0.0, max = 0.058, 0.045
P_j=0.058#min = 0.0, max = 0.058   0.045

mui0=P_mui0*(total_outflows_I) 
mui1=P_mui1*(total_outflows_I)
mui2=P_mui2*(total_outflows_I)

h=P_h*(total_outflows_I)
j=P_j*(total_outflows_I)

epsilon0=epsilon*a
epsilon1=epsilon*b
epsilon2=epsilon*c

nu0=nu*a
nu1=nu*b
nu2=nu*c

#gamma
gamma0=(total_outflows_I)-(mui0+h)
gamma1=(total_outflows_I)-(mui1+j)
gamma2=(total_outflows_I)-(mui2)
#compute baseline delta 
delta0_b=(cdr_b*(gamma0+mui0+mu+h)/(1-cdr_b))
delta1_b=(cdr_b*(gamma1+mui1+mu+j)/(1-cdr_b))
delta2_b=(cdr_b*(gamma2+mui2+mu)/(1-cdr_b))
####Intervention
q=0.2
d=0.8

###
parameter_list=c(N=N,mu=mu,beta0=beta0, beta1=beta1, beta2=beta2,epsilon0=epsilon0,epsilon1=epsilon1,epsilon2=epsilon2, 
                 kappa=kappa,gamma0=gamma0,gamma1=gamma1,gamma2=gamma2,nu0=nu0,nu1=nu1,nu2=nu2, 
                 mui0=mui0,mui1=mui1,mui2=mui2,delta0_b=delta0_b,delta1_b=delta1_b,delta2_b=delta2_b,r=r,
                 h=h,j=j,cdr_b=cdr_b,q=q,d=d) 
 
##Initial values for sub population: 
A=1 #Fully susceptible hosts
B=0        #Early latent hosts
C=0        #Late latent hosts
D=1e-6*a    #active TB hosts proportion of extrapulmonary 15% of all infectious 
E=1e-6*b # active TB Normal spreaders
F=1e-6*c # active TB Super-spreader 10% of TB patients are super-spreaders
G=0 # diagnosed 



  #RUN Baseline Model
  initial_values=c(S=A-(D+E+F), L1=B, L2=C, I0=D,I1=E,I2=F,inc=D+E+F)
  times=seq(0, 2000, by = 1)
  B_out <- as.data.frame(lsoda(initial_values, times, Baseline_model, parameter_list))
  
  Nq=B_out$S+B_out$L1+B_out$L2+B_out$I0+B_out$I1+B_out$I2 # check total population
  incidence_B_out=(diff(B_out$inc)/Nq)*100000 #Compute baseline incidence
  plot(incidence_B_out)
  #check equilibrium state
  ChangeI=abs(incidence_B_out[length(incidence_B_out)-1]-
                incidence_B_out[length(incidence_B_out)-2]) 
  
  max_iter = 100
  n_iter = 0
  while( ChangeI>1.0e-6 && n_iter<max_iter){
    n_iter = n_iter + 1
    initial_values=c(S=B_out$S[length(B_out$S)], L1=B_out$L1[length(B_out$L1)], L2=B_out$L2[length(B_out$L2)], I0=B_out$I0[length(B_out$I0)],I1=B_out$I1[length(B_out$I1)],
                     I2=B_out$I2[length(B_out$I2)],inc=B_out$I0[length(B_out$I0)]+B_out$I1[length(B_out$I1)]+B_out$I2[length(B_out$I2)])
    times=seq(0, 2000, by = 1)
    B_out <- as.data.frame(lsoda(initial_values, times, Baseline_model, parameter_list))
    
    Nq=B_out$S+B_out$L1+B_out$L2+B_out$I0+B_out$I1+B_out$I2
    incidence_B_out=(diff(B_out$inc)/Nq)*100000
    ChangeI=abs(incidence_B_out[length(incidence_B_out)-1]-
                  incidence_B_out[length(incidence_B_out)-2])
  }
  
 
  
  B_Incidence_time_n <- incidence_B_out[length(incidence_B_out)-1] #the model reaches equilibrium at time around 500
  print("baseline")
  print(B_Incidence_time_n)
  
  #record compartment values at equilibrium
  Equi_initial_values=c(S=B_out$S[length(B_out$S)], L1=B_out$L1[length(B_out$L1)], L2=B_out$L2[length(B_out$L2)], I0=B_out$I0[length(B_out$I0)],I1=B_out$I1[length(B_out$I1)],
                        I2=B_out$I2[length(B_out$I2)],inc=B_out$I0[length(B_out$I0)]+B_out$I1[length(B_out$I1)]+B_out$I2[length(B_out$I2)])
  
  #RUN Intervention MODEL, 
  initial_values<-Equi_initial_values #use equilibrium copartment sizes for intiating intervention
  times=seq(0, 200, by = 1)
  Int_out_S <- as.data.frame(lsoda(initial_values, times, 
                                   intervention_model_S, parameter_list))
 
   #View(Int_out_S)
   
   
   
  Nq=Int_out_S$S+Int_out_S$L1+Int_out_S$L2+Int_out_S$I0+Int_out_S$I1+Int_out_S$I2
  Nq
  Int_incidence_outs=(diff(Int_out_S$inc)/Nq)*100000
  plot(Int_incidence_outs)
  
  #considering a 20 years impact of intervention
  Int_Incidence_time_ns = Int_incidence_outs[20]
 print("Intervention")
  print(Int_Incidence_time_ns)
  #calculate the difference between baseline incidence and intervention incidence
  Change_inc=B_Incidence_time_n-Int_Incidence_time_ns 
  print("change")
  print(Change_inc)
  Relative_inc=((B_Incidence_time_n-Int_Incidence_time_ns)/B_Incidence_time_n)*100
 print("relative")
 print(Relative_inc)



















